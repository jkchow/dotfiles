"##### fzf.vim ####
if executable('rg')
  let $FZF_DEFAULT_COMMAND = 'rg --files --ignore-file ~/.ignore-fzf'
elseif executable('ag')
  let $FZF_DEFAULT_COMMAND = 'ag -l --nocolor --path-to-ignore ~/.ignore-fzf -g ""'
endif
" Because fzf.vim uses the :terminal command, we want to change the terminal
" window key from the default ctrl-w; otherwise ctrl-w wouldn't delete the
" word
set termwinkey=<C-L>
" This enables browsing past search queries via CTRL-P and CTRL-N
let g:fzf_history_dir = '~/.local/share/fzf-history'
map <D-t> :FZF <CR>
map <D-p> :call fzf#run({'source': $FZF_DEFAULT_COMMAND . ' -g "!**/test/**" -g "!*.test.js"', 'sink': 'e', 'down': '~40%' }) <CR>
map <D-b> :Buffers<CR>
map <Leader>P :FZF <C-R>=expand('%:h')<CR>
map <Leader>p :FZF <C-R>=expand('$PWD')<CR><CR>

" ##### vim-gitgutter #####
" guibg is set to twilight theme
highlight GitGutterAdd    guifg=#009900 guibg=#34383c ctermfg=2 ctermbg=0
highlight GitGutterChange guifg=#bbbb00 guibg=#34383c ctermfg=3 ctermbg=0
highlight GitGutterDelete guifg=#ff2222 guibg=#34383c ctermfg=1 ctermbg=0

"#####################
"#### NERDTREE ####
"#####################
" Sets NERDTREE to pwd
noremap <Leader>n :execute "NERDTreeToggle"<cr>
noremap <Leader>N :execute "NERDTreeCWD"<cr>
" Will uncollapse NerdTree to current file
noremap <Leader>f :execute "NERDTreeFind"<cr>

"####################
"#### matchit ####
"####################

" Allows `%` key to switch open/close tokens for languages
runtime macros/matchit.vim


"#####################
"#### Regular Vim ####
"#####################

" Disable word wrap
set wrap
set linebreak
set nolist  " list disables linebreak

set nohls

" Remove all trailing whitespaces when saving code files
autocmd BufWritePre *.coffee,*.hamlc,*.haml,*.sass,*.rb,*.rake :%s/\s\+$//e
autocmd BufNewFile,BufRead *.flow set syntax=javascript

" Move forward/backward in the error list window
map <F2> :cp<CR>
map <F3> :cn<CR>
map <D-r> :Dispatch! ctags -R<CR>
nnoremap <leader>T :tabc<CR>

" For autocompletion behavior consistent with terminal
set wildmode=longest,list
set wildmenu

let g:mustache_abbreviations = 1

" https://github.com/jstemmer/gotags
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
    \ }



" Adds :JsonTool command to prettify JSON file
" http://stackoverflow.com/questions/16620835/how-to-fix-json-indentation-in-vim
command! -range -nargs=0 -bar JsonTool <line1>,<line2>!python -m json.tool

" ###### vim-go ######

" adds gorename
au FileType go nmap <Leader>e <Plug>(go-rename)

" Fixes autocompletion issue w/ `gopls`
" https://github.com/fatih/vim-go/issues/2193
au FileType go setlocal omnifunc=go#complete#GocodeComplete

" vim-jsx: enables jsx for .js file extensions
let g:jsx_ext_required = 0

" ##### buffergator #####
let g:buffergator_autoexpand_on_split = 0
let g:buffergator_viewport_split_policy = 'B'
let g:buffergator_sort_regime = 'mru'
let g:buffergator_show_full_directory_path = 0
let g:buffergator_suppress_keymaps=1
nnoremap <silent> <Leader>b :BuffergatorOpen<CR>
nnoremap <silent> <Leader>B :BuffergatorClose<CR>

" ##### Taboo ######

" Tabs will also be saved in sessions
set sessionoptions+=tabpages,globals


" ##### NERDCommenter ######
filetype plugin on
let g:NERDSpaceDelims = 1
if has("gui_macvim") && has("gui_running")
  map <D-/> :call NERDComment(0,"Invert")<CR>
  imap <D-/> <Esc>:call NERDComment(0,"Invert")<CR>i
else
  map <leader>/ :call NERDComment(0,"Invert")<CR>
endif


" ###### ALE ######

" NOTE: This only works after plugin is loaded, so cannot add this to
" .vimrc.before
nmap <leader>F :ALEFix<CR>

" ##### coc.nvim #####

" " don't give |ins-completion-menu| messages in the message buffer
set shortmess+=c

" Better display for messages
set cmdheight=2

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction


" ###### rust.vim ######
let g:rustfmt_autosave = 1
