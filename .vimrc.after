"#####################
"#### ACK ####
"#####################
map <D-F> :Ack!<space>
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

"#### CTRL-P ####
" Set the minimum max files, otherwise some files will not be indexed
let g:ctrlp_max_files = 50000 "default is 10000
" Sets the working directory to the pwd
let g:ctrlp_working_path_mode = 0
" Ignores files, which is then honored by ctrl-p plugin
set wildignore+=*.so,*.swp,*/node_modules/*,*/bower_components/*     " MacOSX/Linux
if executable('ag')
  let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden --path-to-ignore ~/.ignore -g ""'
endif
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\.git$\|\.hg$\|\.svn$\|tmp$\|app\/components\/.*$\|flow-typed$\|bower_components$\|dist$\|node_modules$\|test\/reports$\|vendor\/.*$|client\/app\/components\/.*$',
    \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$\|.zip$' }


"#####################
"#### NERDTREE ####
"#####################
" Sets NERDTREE to pwd
noremap <Leader>n :execute "NERDTreeToggle"<cr>
noremap <Leader>N :execute "NERDTreeCWD"<cr>
" Will uncollapse NerdTree to current file
noremap <Leader>f :execute "NERDTreeFind"<cr>

"####################
"#### matchit ####
"####################

" Allows `%` key to switch open/close tokens for languages
runtime macros/matchit.vim


"#####################
"#### Regular Vim ####
"#####################

" Disable word wrap
set wrap
set linebreak
set nolist  " list disables linebreak

set nohls

" Remove all trailing whitespaces when saving code files
autocmd BufWritePre *.coffee,*.hamlc,*.haml,*.sass,*.rb,*.rake :%s/\s\+$//e
" Sets hamlc to haml format
au BufRead,BufNewFile *.hamlc,*.hamlc.erb set ft=haml
au BufRead,BufNewFile *.hbs set ft=mustache

" Move forward/backward in the error list window
map <F2> :cp<CR>
map <F3> :cn<CR>
map <D-r> :Dispatch! ctags -R<CR>
map <Leader>T :tabc<CR>

" For autocompletion behavior consistent with terminal
set wildmode=longest,list
set wildmenu


" Syntastic options
" Adds eslint for Syntastic
let g:syntastic_javascript_checkers = ['eslint']
if executable('node_modules/.bin/eslint')
  let g:syntastic_javascript_eslint_exec = 'node_modules/.bin/eslint'
endif
let g:syntastic_ruby_checkers = ['rubocop', 'mri']
let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
let g:syntastic_mode_map = { 'mode': 'passive' }

if !empty(matchstr(system('rbenv local'), 'jruby'))
  let g:syntastic_ruby_exec = "$HOME/.rbenv/versions/1.9.3-p547/bin/ruby"
endif

map <Leader>S :let g:syntastic_check_on_open = 0<CR>:SyntasticToggleMode<CR>

let g:mustache_abbreviations = 1


" https://github.com/jstemmer/gotags
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
    \ }


" Auto open NERDTree if there's no files initially opened
" https://github.com/scrooloose/nerdtree
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif


" Adds :JsonTool command to prettify JSON file
" http://stackoverflow.com/questions/16620835/how-to-fix-json-indentation-in-vim
command! -range -nargs=0 -bar JsonTool <line1>,<line2>!python -m json.tool

" For vim-go, adds gorename
au FileType go nmap <Leader>e <Plug>(go-rename)

" Enables neocomplete for go
let g:neocomplete#enable_at_startup = 1

" vim-jsx: enables jsx for .js file extensions
let g:jsx_ext_required = 0

let g:airline#extensions#ale#enabled = 1
let g:ale_open_list = 'on_save'
let g:ale_fixers = {
\   'javascript': ['eslint'],
\}
