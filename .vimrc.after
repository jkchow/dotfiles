"#####################
"#### ACK ####
"#####################
map <D-F> :Ack!<space>

"#### CTRL-P ####
" Set the minimum max files, otherwise some files will not be indexed
let g:ctrlp_max_files = 50000 "default is 10000
" Sets the working directory to the pwd
let g:ctrlp_working_path_mode = 0
" Ignores files, which is then honored by ctrl-p plugin
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/node_modules/*,*/bower_components/*,*/test/reports/*     " MacOSX/Linux


"#####################
"#### NERDTREE ####
"#####################
" Sets NERDTREE to pwd
noremap <Leader>n :execute "NERDTreeToggle"<cr>
noremap <Leader>N :execute "NERDTreeCWD"<cr>
" Will uncollapse NerdTree to current file
noremap <Leader>f :execute "NERDTreeFind"<cr>

"####################
"#### matchit ####
"####################

" Allows `%` key to switch open/close tokens for languages
runtime macros/matchit.vim


"#####################
"#### Regular Vim ####
"#####################

" Disable word wrap
set wrap
set linebreak
set nolist  " list disables linebreak

set nohls

" Remove all trailing whitespaces when saving code files
autocmd BufWritePre *.coffee,*.hamlc,*.haml,*.sass,*.rb,*.rake :%s/\s\+$//e
" Sets hamlc to haml format
au BufRead,BufNewFile *.hamlc,*.hamlc.erb set ft=haml
au BufRead,BufNewFile *.hbs set ft=mustache

" Move forward/backward in the error list window
map <F2> :cp<CR>
map <F3> :cn<CR>
map <D-r> :!ctags -R<CR>
map <Leader>T :tabc<CR>

" For autocompletion behavior consistent with terminal
set wildmode=longest,list
set wildmenu


" Syntastic options
let g:syntastic_coffee_coffeelint_args = "--csv --file ~/.coffeelint.json"
" Adds eslint for Syntastic
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_ruby_checkers = ['rubocop', 'mri']

if !empty(matchstr(system('rbenv local'), 'jruby'))
  let g:syntastic_ruby_exec = "$HOME/.rbenv/versions/1.9.3-p547/bin/ruby"
endif


let g:mustache_abbreviations = 1


" https://github.com/jstemmer/gotags
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
    \ }


" Auto open NERDTree if there's no files initially opened
" https://github.com/scrooloose/nerdtree
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif


" Adds :JsonTool command to prettify JSON file
" http://stackoverflow.com/questions/16620835/how-to-fix-json-indentation-in-vim
command! -range -nargs=0 -bar JsonTool <line1>,<line2>!python -m json.tool

" For vim-go, adds gorename
au FileType go nmap <Leader>e <Plug>(go-rename)


" Adds keyboard commands ot copy the current file
" From http://stackoverflow.com/a/17096082/575101
" copy current file name (relative/absolute) to system clipboard
if has("mac") || has("gui_macvim") || has("gui_mac")
  " relative path  (src/foo.txt)
  nnoremap <leader>cf :let @*=expand("%")<CR>

  " absolute path  (/something/src/foo.txt)
  nnoremap <leader>cF :let @*=expand("%:p")<CR>

  " filename       (foo.txt)
  nnoremap <leader>ct :let @*=expand("%:t")<CR>

  " directory name (/something/src)
  nnoremap <leader>ch :let @*=expand("%:p:h")<CR>
endif

" copy current file name (relative/absolute) to system clipboard (Linux version)
if has("gui_gtk") || has("gui_gtk2") || has("gui_gnome") || has("unix")
  " relative path (src/foo.txt)
  nnoremap <leader>cf :let @+=expand("%")<CR>

  " absolute path (/something/src/foo.txt)
  nnoremap <leader>cF :let @+=expand("%:p")<CR>

  " filename (foo.txt)
  nnoremap <leader>ct :let @+=expand("%:t")<CR>

  " directory name (/something/src)
  nnoremap <leader>ch :let @+=expand("%:p:h")<CR>
endif
