if [ -f ~/.bashrc ]; then
  source ~/.bashrc
fi

# First run `bash < <(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)`
if [ -f ~/.gvm/scripts/gvm ]; then
  source ~/.gvm/scripts/gvm
fi

export GOPATH=$HOME/code/golang

if [ -f ~/.envprivate ]; then
  source ~/.envprivate
fi

alias mvimt="mvim --remote-tab-silent"
alias be="bundle exec"
alias jbe="jruby -G --debug -S"
alias fsd="be foreman start -f Procfile.dev"
alias ls='ls -G'
alias ll='ls -hl'
alias bers="DISABLE_SPRING=1 be rails s -b 127.0.0.1"

# First run `brew install bash-git-prompt`
if [ -f "$(brew --prefix bash-git-prompt)/share/gitprompt.sh" ]; then
    GIT_PROMPT_THEME=Default
    source "$(brew --prefix bash-git-prompt)/share/gitprompt.sh"
fi

# Make sure to run `curl https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash -o ~/.git-completion.bash`
if [ -f ~/.git-completion.bash ]; then
  . ~/.git-completion.bash
fi


if [ -f "/usr/libexec/java_home" ]; then
  export JAVA_HOME=`/usr/libexec/java_home -v 1.8`
fi

export JRUBY_OPTS="-J-Xmn512m -J-Xms2048m -J-Xmx2048m --dev -J-XX:+UseParNewGC -J-XX:+UseConcMarkSweepGC"

# NOTE: /usr/local/bin is for ctags
PATH=/usr/local/heroku/bin:/usr/local/bin:$HOME/.rbenv/bin:$HOME/.rvm/bin:/usr/local/sbin:/usr/local/share/npm/bin:$PATH
PATH=$PATH:$GOPATH/bin


if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi

# Node section
# NOTE: First run `brew install nvm`
export NVM_DIR="$HOME/.nvm"
. "/usr/local/opt/nvm/nvm.sh"

# Disables session suspend so that we can use CTRL+s to go back in history search
stty -ixon

sa ()
{
  eval `ssh-agent -s`
  for f in `ls -d ~/.ssh/**`; do
    if ! [[ $f =~ id_rsa$ ]]
      then ssh-add $f >/dev/null 2>&1
    fi
  done
}

pruneMerged()
{
  git branch --merged | egrep -v "(^\*|master|dev)" | xargs git branch -d
}


# Requires fzf `brew install fzf`
fbl() {
  local branches branch
  branches=$(git branch -vv) &&
  branch=$(echo "$branches" | fzf +m) &&
  git checkout $(echo "$branch" | awk '{print $1}' | sed "s/.* //")
}

fbcl() {
  local branches branch
  branches=$(git branch -vv) &&
  branch=$(echo "$branches" | fzf +m) &&
  echo "$branch" | awk '{print $1}' | sed "s/.* //" | tr -d '\n' | pbcopy
}

fbr() {
  local branches branch
  branches=$(git branch --all | grep -v HEAD) &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

cb() {
  echo $(git rev-parse --abbrev-ref HEAD | tr -d '\n')
}

notify() {
  terminal-notifier -message "$1" -sound default -title ${2:-Notifier}
}

cleanupLocalBranches() {
  git fetch -p &&  # fetch remotes + prune
    git branch -r | egrep "^\s*origin/.*" | awk '{print $1}' | # only get remotes from origin
    grep -v -f /dev/fd/0 <(git branch -vv) > /tmp/missing-branches && # filter for local branches that don't have a remote branch
    vim /tmp/missing-branches && # allow editing of branches to be deleted
    cat /tmp/missing-branches | awk '{print $1}' | xargs git branch -D # delete branches
}
